{
    "sourceFile": "server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 58,
            "patches": [
                {
                    "date": 1727766373619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727766383090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,8 @@\n \r\n         cb(null, Date.now() + path.extname(file.originalname))\r\n \r\n     }\r\n-\r\n })\r\n \r\n const upload = multer({ storage: storage });\r\n \r\n"
                },
                {
                    "date": 1727766388492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,8 @@\n     }\r\n });\r\n \r\n // กำหนดโฟลเดอร์สำหรับเก็บรูป\r\n-\r\n const storage = multer.diskStorage({\r\n \r\n     destination: function (req, file, cb) {\r\n \r\n@@ -90,9 +89,8 @@\n         cb(null, Date.now() + path.extname(file.originalname))\r\n \r\n     }\r\n })\r\n-\r\n const upload = multer({ storage: storage });\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1727766395053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,13 +76,10 @@\n });\r\n \r\n // กำหนดโฟลเดอร์สำหรับเก็บรูป\r\n const storage = multer.diskStorage({\r\n-\r\n     destination: function (req, file, cb) {\r\n-\r\n         cb(null, 'uploads/')\r\n-\r\n     },\r\n \r\n     filename: function(req, file, cb) {\r\n \r\n"
                },
                {
                    "date": 1727766401853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,8 @@\n const storage = multer.diskStorage({\r\n     destination: function (req, file, cb) {\r\n         cb(null, 'uploads/')\r\n     },\r\n-\r\n     filename: function(req, file, cb) {\r\n \r\n         cb(null, Date.now() + path.extname(file.originalname))\r\n \r\n"
                },
                {
                    "date": 1727766410825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,11 +86,8 @@\n \r\n     }\r\n })\r\n const upload = multer({ storage: storage });\r\n-\r\n-\r\n-\r\n // เปิดให้เข้าถึงไฟล์จากโฟลเดอร์ 'uploads'\r\n \r\n app.use('/uploads', express.static('uploads'));\r\n \r\n"
                },
                {
                    "date": 1727766707997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n const pool = require('./database');\r\n const bcrypt = require('bcryptjs');\r\n const jwt = require('jsonwebtoken');\r\n const cors = require('cors');\r\n+\r\n require('dotenv').config();\r\n \r\n const app = express();\r\n app.use(cors());\r\n@@ -86,9 +87,9 @@\n \r\n     }\r\n })\r\n const upload = multer({ storage: storage });\r\n+\r\n // เปิดให้เข้าถึงไฟล์จากโฟลเดอร์ 'uploads'\r\n-\r\n app.use('/uploads', express.static('uploads'));\r\n \r\n app.listen(port, () => console.log(`Example app listening on port ${port}!`));\r\n"
                },
                {
                    "date": 1727766717650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const pool = require('./database');\r\n const bcrypt = require('bcryptjs');\r\n const jwt = require('jsonwebtoken');\r\n const cors = require('cors');\r\n-\r\n+const \r\n require('dotenv').config();\r\n \r\n const app = express();\r\n app.use(cors());\r\n"
                },
                {
                    "date": 1727766769202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n const pool = require('./database');\r\n const bcrypt = require('bcryptjs');\r\n const jwt = require('jsonwebtoken');\r\n const cors = require('cors');\r\n-const \r\n require('dotenv').config();\r\n \r\n const app = express();\r\n app.use(cors());\r\n"
                },
                {
                    "date": 1727766800116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,8 @@\n \r\n     }\r\n })\r\n const upload = multer({ storage: storage });\r\n-\r\n // เปิดให้เข้าถึงไฟล์จากโฟลเดอร์ 'uploads'\r\n app.use('/uploads', express.static('uploads'));\r\n \r\n app.listen(port, () => console.log(`Example app listening on port ${port}!`));\r\n"
                },
                {
                    "date": 1727766848836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,10 @@\n \r\n const port = 4000;\r\n app.get('/', (req, res) => res.send('Hello World!'));\r\n \r\n+\r\n+\r\n app.post('/register', async (req, res) => {\r\n     const { email, password, name } = req.body;\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n     try {\r\n"
                },
                {
                    "date": 1727766858600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,30 @@\n \r\n const port = 4000;\r\n app.get('/', (req, res) => res.send('Hello World!'));\r\n \r\n+// ตรวจสอบ user token\r\n \r\n+const authenticateToken = (req, res, next) => {\r\n \r\n+    const authHeader = req.headers['authorization'];\r\n+  \r\n+    const token = authHeader && authHeader.split(' ')[1]; // รับ token จาก header\r\n+  \r\n+    if (!token) return res.sendStatus(401); // ถ้าไม่มี token ส่ง status 401\r\n+  \r\n+    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {\r\n+  \r\n+      if (err) return res.sendStatus(403); // ถ้า token ไม่ถูกต้อง ส่ง status 403\r\n+  \r\n+      req.user = user; // เก็บข้อมูล user ไว้ใน req\r\n+  \r\n+      next(); // ดำเนินการต่อไป\r\n+  \r\n+    });\r\n+  \r\n+  };\r\n+\r\n app.post('/register', async (req, res) => {\r\n     const { email, password, name } = req.body;\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n     try {\r\n"
                },
                {
                    "date": 1727766863991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,11 +15,9 @@\n \r\n // ตรวจสอบ user token\r\n \r\n const authenticateToken = (req, res, next) => {\r\n-\r\n     const authHeader = req.headers['authorization'];\r\n-  \r\n     const token = authHeader && authHeader.split(' ')[1]; // รับ token จาก header\r\n   \r\n     if (!token) return res.sendStatus(401); // ถ้าไม่มี token ส่ง status 401\r\n   \r\n"
                },
                {
                    "date": 1727766870046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,10 @@\n \r\n const authenticateToken = (req, res, next) => {\r\n     const authHeader = req.headers['authorization'];\r\n     const token = authHeader && authHeader.split(' ')[1]; // รับ token จาก header\r\n-  \r\n     if (!token) return res.sendStatus(401); // ถ้าไม่มี token ส่ง status 401\r\n-  \r\n+\r\n     jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {\r\n   \r\n       if (err) return res.sendStatus(403); // ถ้า token ไม่ถูกต้อง ส่ง status 403\r\n   \r\n"
                },
                {
                    "date": 1727766878232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,13 +18,10 @@\n const authenticateToken = (req, res, next) => {\r\n     const authHeader = req.headers['authorization'];\r\n     const token = authHeader && authHeader.split(' ')[1]; // รับ token จาก header\r\n     if (!token) return res.sendStatus(401); // ถ้าไม่มี token ส่ง status 401\r\n-\r\n     jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {\r\n-  \r\n       if (err) return res.sendStatus(403); // ถ้า token ไม่ถูกต้อง ส่ง status 403\r\n-  \r\n       req.user = user; // เก็บข้อมูล user ไว้ใน req\r\n   \r\n       next(); // ดำเนินการต่อไป\r\n   \r\n"
                },
                {
                    "date": 1727766884992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,13 +21,10 @@\n     if (!token) return res.sendStatus(401); // ถ้าไม่มี token ส่ง status 401\r\n     jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {\r\n       if (err) return res.sendStatus(403); // ถ้า token ไม่ถูกต้อง ส่ง status 403\r\n       req.user = user; // เก็บข้อมูล user ไว้ใน req\r\n-  \r\n       next(); // ดำเนินการต่อไป\r\n-  \r\n     });\r\n-  \r\n   };\r\n \r\n app.post('/register', async (req, res) => {\r\n     const { email, password, name } = req.body;\r\n"
                },
                {
                    "date": 1727766990048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,15 +18,18 @@\n const authenticateToken = (req, res, next) => {\r\n     const authHeader = req.headers['authorization'];\r\n     const token = authHeader && authHeader.split(' ')[1]; // รับ token จาก header\r\n     if (!token) return res.sendStatus(401); // ถ้าไม่มี token ส่ง status 401\r\n+\r\n     jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {\r\n       if (err) return res.sendStatus(403); // ถ้า token ไม่ถูกต้อง ส่ง status 403\r\n       req.user = user; // เก็บข้อมูล user ไว้ใน req\r\n       next(); // ดำเนินการต่อไป\r\n     });\r\n   };\r\n \r\n+  \r\n+\r\n app.post('/register', async (req, res) => {\r\n     const { email, password, name } = req.body;\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n     try {\r\n"
                },
                {
                    "date": 1727767002658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,10 @@\n       next(); // ดำเนินการต่อไป\r\n     });\r\n   };\r\n \r\n-  \r\n \r\n+\r\n app.post('/register', async (req, res) => {\r\n     const { email, password, name } = req.body;\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n     try {\r\n"
                },
                {
                    "date": 1727767008198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,35 @@\n       next(); // ดำเนินการต่อไป\r\n     });\r\n   };\r\n \r\n+// ดึงข้อมูลผู้ใช้งานที่เข้าเข้าระบบ Account\r\n \r\n+app.get('/account' , authenticateToken, async (req, res) => {\r\n \r\n+    try {\r\n+  \r\n+      const userid = req.user.id;\r\n+  \r\n+      const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id =?\", [userid])\r\n+  \r\n+      if(results.length === 0) {\r\n+  \r\n+        return res.status(404).json({error: \"ไม่พบผู้ใช้\"})\r\n+  \r\n+      }\r\n+  \r\n+      res.json(results)\r\n+  \r\n+    }catch (err) {\r\n+  \r\n+      console.log(err)\r\n+  \r\n+      res.status(500).json({ error: \"ผิดพลาด\"})\r\n+  \r\n+    }\r\n+  })\r\n+\r\n app.post('/register', async (req, res) => {\r\n     const { email, password, name } = req.body;\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n     try {\r\n"
                },
                {
                    "date": 1727767014048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,11 +39,9 @@\n   \r\n       if(results.length === 0) {\r\n   \r\n         return res.status(404).json({error: \"ไม่พบผู้ใช้\"})\r\n-  \r\n       }\r\n-  \r\n       res.json(results)\r\n   \r\n     }catch (err) {\r\n   \r\n"
                },
                {
                    "date": 1727767019812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,11 +27,9 @@\n     });\r\n   };\r\n \r\n // ดึงข้อมูลผู้ใช้งานที่เข้าเข้าระบบ Account\r\n-\r\n app.get('/account' , authenticateToken, async (req, res) => {\r\n-\r\n     try {\r\n   \r\n       const userid = req.user.id;\r\n   \r\n"
                },
                {
                    "date": 1727767026620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,13 +29,10 @@\n \r\n // ดึงข้อมูลผู้ใช้งานที่เข้าเข้าระบบ Account\r\n app.get('/account' , authenticateToken, async (req, res) => {\r\n     try {\r\n-  \r\n       const userid = req.user.id;\r\n-  \r\n       const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id =?\", [userid])\r\n-  \r\n       if(results.length === 0) {\r\n   \r\n         return res.status(404).json({error: \"ไม่พบผู้ใช้\"})\r\n       }\r\n"
                },
                {
                    "date": 1727767035369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,13 +32,11 @@\n     try {\r\n       const userid = req.user.id;\r\n       const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id =?\", [userid])\r\n       if(results.length === 0) {\r\n-  \r\n         return res.status(404).json({error: \"ไม่พบผู้ใช้\"})\r\n       }\r\n       res.json(results)\r\n-  \r\n     }catch (err) {\r\n   \r\n       console.log(err)\r\n   \r\n"
                },
                {
                    "date": 1727767042078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,11 +36,9 @@\n         return res.status(404).json({error: \"ไม่พบผู้ใช้\"})\r\n       }\r\n       res.json(results)\r\n     }catch (err) {\r\n-  \r\n       console.log(err)\r\n-  \r\n       res.status(500).json({ error: \"ผิดพลาด\"})\r\n   \r\n     }\r\n   })\r\n"
                },
                {
                    "date": 1727767071507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,8 @@\n const port = 4000;\r\n app.get('/', (req, res) => res.send('Hello World!'));\r\n \r\n // ตรวจสอบ user token\r\n-\r\n const authenticateToken = (req, res, next) => {\r\n     const authHeader = req.headers['authorization'];\r\n     const token = authHeader && authHeader.split(' ')[1]; // รับ token จาก header\r\n     if (!token) return res.sendStatus(401); // ถ้าไม่มี token ส่ง status 401\r\n@@ -38,9 +37,8 @@\n       res.json(results)\r\n     }catch (err) {\r\n       console.log(err)\r\n       res.status(500).json({ error: \"ผิดพลาด\"})\r\n-  \r\n     }\r\n   })\r\n \r\n app.post('/register', async (req, res) => {\r\n"
                },
                {
                    "date": 1727770727942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n     }\r\n });\r\n \r\n // กำหนดโฟลเดอร์สำหรับเก็บรูป\r\n-const storage = multer.diskStorage({\r\n+const storage = mu.diskStorage({\r\n     destination: function (req, file, cb) {\r\n         cb(null, 'uploads/')\r\n     },\r\n     filename: function(req, file, cb) {\r\n"
                },
                {
                    "date": 1727773393583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n const pool = require('./database');\r\n const bcrypt = require('bcryptjs');\r\n const jwt = require('jsonwebtoken');\r\n const cors = require('cors');\r\n+const multer = require('multer');\r\n require('dotenv').config();\r\n \r\n const app = express();\r\n app.use(cors());\r\n@@ -103,9 +104,9 @@\n     }\r\n });\r\n \r\n // กำหนดโฟลเดอร์สำหรับเก็บรูป\r\n-const storage = mu.diskStorage({\r\n+const storage = multer.diskStorage({\r\n     destination: function (req, file, cb) {\r\n         cb(null, 'uploads/')\r\n     },\r\n     filename: function(req, file, cb) {\r\n@@ -117,5 +118,61 @@\n const upload = multer({ storage: storage });\r\n // เปิดให้เข้าถึงไฟล์จากโฟลเดอร์ 'uploads'\r\n app.use('/uploads', express.static('uploads'));\r\n \r\n+// แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n+\r\n+app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n+\r\n+    const { name, email } = req.body;\r\n+  \r\n+    const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n+  \r\n+    try{\r\n+  \r\n+      const userid = req.user.id;\r\n+  \r\n+  \r\n+  \r\n+      let query = 'UPDATE users SET name=?, email=?'\r\n+  \r\n+      let params = [name , email]\r\n+  \r\n+  \r\n+  \r\n+      if(picturePath) {\r\n+  \r\n+        query += ', picture =? '\r\n+  \r\n+        params.push(picturePath)\r\n+  \r\n+      }\r\n+  \r\n+      query += 'WHERE id =? '\r\n+  \r\n+      params.push(userid)\r\n+  \r\n+  \r\n+  \r\n+      const [results] = await pool.query(query, params);\r\n+  \r\n+  \r\n+  \r\n+      if(results.affectedRows === 0) {\r\n+  \r\n+        return res.status(400).json({ error : \"ไมพบผู้ใช้\"});\r\n+  \r\n+      }\r\n+  \r\n+      res.json({message: \"แก้ไขข้อมูลเรียบร้อย\"});\r\n+  \r\n+    } catch (err) {\r\n+  \r\n+      console.log(\"Error\", err);\r\n+  \r\n+      res.status(500).json( {error : \"ผิดพลาด\"});\r\n+  \r\n+    }\r\n+  \r\n+  })\r\n+\r\n app.listen(port, () => console.log(`Example app listening on port ${port}!`));\r\n"
                },
                {
                    "date": 1727773399397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,8 @@\n // เปิดให้เข้าถึงไฟล์จากโฟลเดอร์ 'uploads'\r\n app.use('/uploads', express.static('uploads'));\r\n \r\n // แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n-\r\n app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n \r\n     const { name, email } = req.body;\r\n   \r\n"
                },
                {
                    "date": 1727773404631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,11 +120,9 @@\n app.use('/uploads', express.static('uploads'));\r\n \r\n // แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n-\r\n     const { name, email } = req.body;\r\n-  \r\n     const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n   \r\n     try{\r\n   \r\n"
                },
                {
                    "date": 1727773409694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,11 +122,9 @@\n // แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n     const { name, email } = req.body;\r\n     const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n-  \r\n     try{\r\n-  \r\n       const userid = req.user.id;\r\n   \r\n   \r\n   \r\n"
                },
                {
                    "date": 1727773415284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,11 +124,8 @@\n     const { name, email } = req.body;\r\n     const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n     try{\r\n       const userid = req.user.id;\r\n-  \r\n-  \r\n-  \r\n       let query = 'UPDATE users SET name=?, email=?'\r\n   \r\n       let params = [name , email]\r\n   \r\n"
                },
                {
                    "date": 1727773423147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,13 +125,9 @@\n     const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n     try{\r\n       const userid = req.user.id;\r\n       let query = 'UPDATE users SET name=?, email=?'\r\n-  \r\n       let params = [name , email]\r\n-  \r\n-  \r\n-  \r\n       if(picturePath) {\r\n   \r\n         query += ', picture =? '\r\n   \r\n"
                },
                {
                    "date": 1727773428589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,13 +127,10 @@\n       const userid = req.user.id;\r\n       let query = 'UPDATE users SET name=?, email=?'\r\n       let params = [name , email]\r\n       if(picturePath) {\r\n-  \r\n         query += ', picture =? '\r\n-  \r\n         params.push(picturePath)\r\n-  \r\n       }\r\n   \r\n       query += 'WHERE id =? '\r\n   \r\n"
                },
                {
                    "date": 1727773437187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,15 +130,10 @@\n       if(picturePath) {\r\n         query += ', picture =? '\r\n         params.push(picturePath)\r\n       }\r\n-  \r\n       query += 'WHERE id =? '\r\n-  \r\n       params.push(userid)\r\n-  \r\n-  \r\n-  \r\n       const [results] = await pool.query(query, params);\r\n   \r\n   \r\n   \r\n"
                },
                {
                    "date": 1727773442390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,13 +133,9 @@\n       }\r\n       query += 'WHERE id =? '\r\n       params.push(userid)\r\n       const [results] = await pool.query(query, params);\r\n-  \r\n-  \r\n-  \r\n       if(results.affectedRows === 0) {\r\n-  \r\n         return res.status(400).json({ error : \"ไมพบผู้ใช้\"});\r\n   \r\n       }\r\n   \r\n"
                },
                {
                    "date": 1727773447718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,13 +135,10 @@\n       params.push(userid)\r\n       const [results] = await pool.query(query, params);\r\n       if(results.affectedRows === 0) {\r\n         return res.status(400).json({ error : \"ไมพบผู้ใช้\"});\r\n-  \r\n       }\r\n-  \r\n       res.json({message: \"แก้ไขข้อมูลเรียบร้อย\"});\r\n-  \r\n     } catch (err) {\r\n   \r\n       console.log(\"Error\", err);\r\n   \r\n"
                },
                {
                    "date": 1727773453695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,13 +138,10 @@\n         return res.status(400).json({ error : \"ไมพบผู้ใช้\"});\r\n       }\r\n       res.json({message: \"แก้ไขข้อมูลเรียบร้อย\"});\r\n     } catch (err) {\r\n-  \r\n       console.log(\"Error\", err);\r\n-  \r\n       res.status(500).json( {error : \"ผิดพลาด\"});\r\n-  \r\n     }\r\n   \r\n   })\r\n \r\n"
                },
                {
                    "date": 1727773882312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n const jwt = require('jsonwebtoken');\r\n const cors = require('cors');\r\n const multer = require('multer');\r\n require('dotenv').config();\r\n+impo\r\n \r\n const app = express();\r\n app.use(cors());\r\n app.use(express.json());\r\n@@ -141,8 +142,7 @@\n     } catch (err) {\r\n       console.log(\"Error\", err);\r\n       res.status(500).json( {error : \"ผิดพลาด\"});\r\n     }\r\n-  \r\n   })\r\n \r\n app.listen(port, () => console.log(`Example app listening on port ${port}!`));\r\n"
                },
                {
                    "date": 1727773911882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const jwt = require('jsonwebtoken');\r\n const cors = require('cors');\r\n const multer = require('multer');\r\n require('dotenv').config();\r\n-impo\r\n+import path ;\r\n \r\n const app = express();\r\n app.use(cors());\r\n app.use(express.json());\r\n"
                },
                {
                    "date": 1727773988629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const jwt = require('jsonwebtoken');\r\n const cors = require('cors');\r\n const multer = require('multer');\r\n require('dotenv').config();\r\n-import path ;\r\n+const path = require('path');\r\n \r\n const app = express();\r\n app.use(cors());\r\n app.use(express.json());\r\n"
                },
                {
                    "date": 1727774088019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,15 +4,14 @@\n const jwt = require('jsonwebtoken');\r\n const cors = require('cors');\r\n const multer = require('multer');\r\n require('dotenv').config();\r\n-const path = require('path');\r\n+const path = require('path'); // แก้ไข import เป็น require\r\n \r\n const app = express();\r\n app.use(cors());\r\n app.use(express.json());\r\n \r\n-\r\n const port = 4000;\r\n app.get('/', (req, res) => res.send('Hello World!'));\r\n \r\n // ตรวจสอบ user token\r\n"
                },
                {
                    "date": 1727774415312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n     }\r\n })\r\n const upload = multer({ storage: storage });\r\n // เปิดให้เข้าถึงไฟล์จากโฟลเดอร์ 'uploads'\r\n-app.use('/uploads', express.static('uploads'));\r\n+app.use('', express.static('uploads'));\r\n \r\n // แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n     const { name, email } = req.body;\r\n"
                },
                {
                    "date": 1727774422088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n     }\r\n })\r\n const upload = multer({ storage: storage });\r\n // เปิดให้เข้าถึงไฟล์จากโฟลเดอร์ 'uploads'\r\n-app.use('', express.static('uploads'));\r\n+app.use('./', express.static('uploads'));\r\n \r\n // แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n     const { name, email } = req.body;\r\n"
                },
                {
                    "date": 1727774430405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n     }\r\n })\r\n const upload = multer({ storage: storage });\r\n // เปิดให้เข้าถึงไฟล์จากโฟลเดอร์ 'uploads'\r\n-app.use('./', express.static('uploads'));\r\n+app.use('./uploads', express.static('uploads'));\r\n \r\n // แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n     const { name, email } = req.body;\r\n"
                },
                {
                    "date": 1727774976676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const jwt = require('jsonwebtoken');\r\n const cors = require('cors');\r\n const multer = require('multer');\r\n require('dotenv').config();\r\n-const path = require('path'); // แก้ไข import เป็น require\r\n+const path = require('path');\r\n \r\n const app = express();\r\n app.use(cors());\r\n app.use(express.json());\r\n@@ -16,132 +16,70 @@\n \r\n // ตรวจสอบ user token\r\n const authenticateToken = (req, res, next) => {\r\n     const authHeader = req.headers['authorization'];\r\n-    const token = authHeader && authHeader.split(' ')[1]; // รับ token จาก header\r\n-    if (!token) return res.sendStatus(401); // ถ้าไม่มี token ส่ง status 401\r\n+    const token = authHeader && authHeader.split(' ')[1];\r\n+    if (!token) return res.sendStatus(401);\r\n \r\n     jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {\r\n-      if (err) return res.sendStatus(403); // ถ้า token ไม่ถูกต้อง ส่ง status 403\r\n-      req.user = user; // เก็บข้อมูล user ไว้ใน req\r\n-      next(); // ดำเนินการต่อไป\r\n+      if (err) return res.sendStatus(403);\r\n+      req.user = user;\r\n+      next();\r\n     });\r\n-  };\r\n+};\r\n \r\n-// ดึงข้อมูลผู้ใช้งานที่เข้าเข้าระบบ Account\r\n-app.get('/account' , authenticateToken, async (req, res) => {\r\n+// ดึงข้อมูลผู้ใช้งานที่เข้าสู่ระบบ\r\n+app.get('/account', authenticateToken, async (req, res) => {\r\n     try {\r\n-      const userid = req.user.id;\r\n-      const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id =?\", [userid])\r\n-      if(results.length === 0) {\r\n-        return res.status(404).json({error: \"ไม่พบผู้ใช้\"})\r\n-      }\r\n-      res.json(results)\r\n-    }catch (err) {\r\n-      console.log(err)\r\n-      res.status(500).json({ error: \"ผิดพลาด\"})\r\n-    }\r\n-  })\r\n-\r\n-app.post('/register', async (req, res) => {\r\n-    const { email, password, name } = req.body;\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-    try {\r\n-        const [result] = await pool.query('INSERT INTO users (email, password, name) VALUES (?, ?, ?)', [email, hashedPassword, name]);\r\n-        res.status(201).send('User registered');\r\n-    } catch (error) {\r\n-        console.error(error); // เพิ่มการพิมพ์ข้อผิดพลาดเพื่อช่วยในการดีบัก\r\n-        res.status(500).send('Error registering user');\r\n-    }\r\n-});\r\n-\r\n-app.post('/login', async (req, res) => {\r\n-    const { email, password } = req.body;\r\n-    try {\r\n-        const [results] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);\r\n-        const user = results[0];\r\n-        if (!user) {\r\n-            return res.status(404).json({ message: 'User not found' });\r\n+        const userid = req.user.id;\r\n+        const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id = ?\", [userid]);\r\n+        if (results.length === 0) {\r\n+            return res.status(404).json({ error: \"ไม่พบผู้ใช้\" });\r\n         }\r\n-        if (await bcrypt.compare(password, user.password)) {\r\n-            const accessToken = jwt.sign({ id: user.id, email: user.email },\r\n-                process.env.ACCESS_TOKEN_SECRET,\r\n-                { expiresIn: '20h' }\r\n-            );\r\n-            return res.json({ token: accessToken });\r\n-        } else {\r\n-            return res.status(401).json({ message: 'Password incorrect' });\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error); // เพิ่มการพิมพ์ข้อผิดพลาดเพื่อช่วยในการดีบัก\r\n-        res.status(500).send('Error logging in');\r\n+        res.json(results.map(user => ({\r\n+            ...user,\r\n+            picture: user.picture ? `http://localhost:4000/${user.picture}` : null\r\n+        })));\r\n+    } catch (err) {\r\n+        console.log(err);\r\n+        res.status(500).json({ error: \"เกิดข้อผิดพลาด\" });\r\n     }\r\n });\r\n \r\n-app.post('/addnew', async (req, res) => {\r\n-    const { fname, lname } = req.body;\r\n-\r\n-    // ตรวจสอบข้อมูลพนักงานที่มีอยู่แล้วในฐานข้อมูล\r\n-    const [results] = await pool.query('SELECT * FROM employees WHERE fname = ?', [fname]);\r\n-    let employee = results[0];\r\n-\r\n-    // ถ้าพนักงานไม่พบในฐานข้อมูล ให้เพิ่มข้อมูลพนักงานใหม่\r\n-    if (!employee) {\r\n-        await pool.query('INSERT INTO employees (fname, lname) VALUES (?, ?)', [fname, lname]);\r\n-        // ดึงข้อมูลพนักงานที่เพิ่มใหม่ออกมา\r\n-        const [newResults] = await pool.query('SELECT * FROM employees WHERE fname = ?', [fname]);\r\n-        employee = newResults[0];\r\n-    }\r\n-\r\n-    // ตรวจสอบการเปรียบเทียบรหัสผ่าน\r\n-    if (await bcrypt.compare(lname, employee.lname)) {\r\n-        const accessToken = jwt.sign({ id: employee.id, fname: employee.fname },\r\n-            process.env.ACCESS_TOKEN_SECRET,\r\n-            { expiresIn: '20h' }\r\n-        );\r\n-        return res.json({ token: accessToken });\r\n-    } else {\r\n-        return res.status(401).json({ message: 'เพิ่มข้อมูลสำเร็จ' });\r\n-    }\r\n-});\r\n-\r\n // กำหนดโฟลเดอร์สำหรับเก็บรูป\r\n const storage = multer.diskStorage({\r\n     destination: function (req, file, cb) {\r\n-        cb(null, 'uploads/')\r\n+        cb(null, 'uploads/');\r\n     },\r\n-    filename: function(req, file, cb) {\r\n-\r\n-        cb(null, Date.now() + path.extname(file.originalname))\r\n-\r\n+    filename: function (req, file, cb) {\r\n+        cb(null, Date.now() + path.extname(file.originalname));\r\n     }\r\n-})\r\n+});\r\n const upload = multer({ storage: storage });\r\n-// เปิดให้เข้าถึงไฟล์จากโฟลเดอร์ 'uploads'\r\n-app.use('./uploads', express.static('uploads'));\r\n+app.use('/uploads', express.static('uploads'));\r\n \r\n // แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n-app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n+app.put('/update-account', authenticateToken, upload.single('picture'), async (req, res) => {\r\n     const { name, email } = req.body;\r\n     const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n-    try{\r\n-      const userid = req.user.id;\r\n-      let query = 'UPDATE users SET name=?, email=?'\r\n-      let params = [name , email]\r\n-      if(picturePath) {\r\n-        query += ', picture =? '\r\n-        params.push(picturePath)\r\n-      }\r\n-      query += 'WHERE id =? '\r\n-      params.push(userid)\r\n-      const [results] = await pool.query(query, params);\r\n-      if(results.affectedRows === 0) {\r\n-        return res.status(400).json({ error : \"ไมพบผู้ใช้\"});\r\n-      }\r\n-      res.json({message: \"แก้ไขข้อมูลเรียบร้อย\"});\r\n+    try {\r\n+        const userid = req.user.id;\r\n+        let query = 'UPDATE users SET name = ?, email = ?';\r\n+        let params = [name, email];\r\n+        if (picturePath) {\r\n+            query += ', picture = ?';\r\n+            params.push(picturePath);\r\n+        }\r\n+        query += ' WHERE id = ?';\r\n+        params.push(userid);\r\n+        const [results] = await pool.query(query, params);\r\n+        if (results.affectedRows === 0) {\r\n+            return res.status(400).json({ error: \"ไม่พบผู้ใช้\" });\r\n+        }\r\n+        res.json({ message: \"แก้ไขข้อมูลเรียบร้อย\" });\r\n     } catch (err) {\r\n-      console.log(\"Error\", err);\r\n-      res.status(500).json( {error : \"ผิดพลาด\"});\r\n+        console.log(err);\r\n+        res.status(500).json({ error: \"เกิดข้อผิดพลาด\" });\r\n     }\r\n-  })\r\n+});\r\n \r\n app.listen(port, () => console.log(`Example app listening on port ${port}!`));\r\n"
                },
                {
                    "date": 1727776013213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n             return res.status(404).json({ error: \"ไม่พบผู้ใช้\" });\r\n         }\r\n         res.json(results.map(user => ({\r\n             ...user,\r\n-            picture: user.picture ? `http://localhost:4000/${user.picture}` : null\r\n+            picture: user.picture ? `http://localhost:4000` : null\r\n         })));\r\n     } catch (err) {\r\n         console.log(err);\r\n         res.status(500).json({ error: \"เกิดข้อผิดพลาด\" });\r\n"
                },
                {
                    "date": 1727776079491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n             return res.status(404).json({ error: \"ไม่พบผู้ใช้\" });\r\n         }\r\n         res.json(results.map(user => ({\r\n             ...user,\r\n-            picture: user.picture ? `http://localhost:4000` : null\r\n+            picture: user.picture ? `http://localhost:4000/${user.picture}` : null\r\n         })));\r\n     } catch (err) {\r\n         console.log(err);\r\n         res.status(500).json({ error: \"เกิดข้อผิดพลาด\" });\r\n"
                },
                {
                    "date": 1727776101372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,29 +57,60 @@\n const upload = multer({ storage: storage });\r\n app.use('/uploads', express.static('uploads'));\r\n \r\n // แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n-app.put('/update-account', authenticateToken, upload.single('picture'), async (req, res) => {\r\n+\r\n+app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n+\r\n     const { name, email } = req.body;\r\n+  \r\n     const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n-    try {\r\n-        const userid = req.user.id;\r\n-        let query = 'UPDATE users SET name = ?, email = ?';\r\n-        let params = [name, email];\r\n-        if (picturePath) {\r\n-            query += ', picture = ?';\r\n-            params.push(picturePath);\r\n-        }\r\n-        query += ' WHERE id = ?';\r\n-        params.push(userid);\r\n-        const [results] = await pool.query(query, params);\r\n-        if (results.affectedRows === 0) {\r\n-            return res.status(400).json({ error: \"ไม่พบผู้ใช้\" });\r\n-        }\r\n-        res.json({ message: \"แก้ไขข้อมูลเรียบร้อย\" });\r\n+  \r\n+    try{\r\n+  \r\n+      const userid = req.user.id;\r\n+  \r\n+  \r\n+  \r\n+      let query = 'UPDATE users SET name=?, email=?'\r\n+  \r\n+      let params = [name , email]\r\n+  \r\n+  \r\n+  \r\n+      if(picturePath) {\r\n+  \r\n+        query += ', picture =? '\r\n+  \r\n+        params.push(picturePath)\r\n+  \r\n+      }\r\n+  \r\n+      query += 'WHERE id =? '\r\n+  \r\n+      params.push(userid)\r\n+  \r\n+  \r\n+  \r\n+      const [results] = await pool.query(query, params);\r\n+  \r\n+  \r\n+  \r\n+      if(results.affectedRows === 0) {\r\n+  \r\n+        return res.status(400).json({ error : \"ไมพบผู้ใช้\"});\r\n+  \r\n+      }\r\n+  \r\n+      res.json({message: \"แก้ไขข้อมูลเรียบร้อย\"});\r\n+  \r\n     } catch (err) {\r\n-        console.log(err);\r\n-        res.status(500).json({ error: \"เกิดข้อผิดพลาด\" });\r\n+  \r\n+      console.log(\"Error\", err);\r\n+  \r\n+      res.status(500).json( {error : \"ผิดพลาด\"});\r\n+  \r\n     }\r\n-});\r\n+  \r\n+  })\r\n \r\n app.listen(port, () => console.log(`Example app listening on port ${port}!`));\r\n"
                },
                {
                    "date": 1727776123626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+const express = require('express');\r\n+const pool = require('./database');\r\n+const bcrypt = require('bcryptjs');\r\n+const jwt = require('jsonwebtoken');\r\n+const cors = require('cors');\r\n+const multer = require('multer');\r\n+require('dotenv').config();\r\n+const path = require('path');\r\n+\r\n+const app = express();\r\n+app.use(cors());\r\n+app.use(express.json());\r\n+\r\n+const port = 4000;\r\n+app.get('/', (req, res) => res.send('Hello World!'));\r\n+\r\n+// ตรวจสอบ user token\r\n+const authenticateToken = (req, res, next) => {\r\n+    const authHeader = req.headers['authorization'];\r\n+    const token = authHeader && authHeader.split(' ')[1];\r\n+    if (!token) return res.sendStatus(401);\r\n+\r\n+    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {\r\n+      if (err) return res.sendStatus(403);\r\n+      req.user = user;\r\n+      next();\r\n+    });\r\n+};\r\n+\r\n+// ดึงข้อมูลผู้ใช้งานที่เข้าสู่ระบบ\r\n+app.get('/account', authenticateToken, async (req, res) => {\r\n+    try {\r\n+        const userid = req.user.id;\r\n+        const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id = ?\", [userid]);\r\n+        if (results.length === 0) {\r\n+            return res.status(404).json({ error: \"ไม่พบผู้ใช้\" });\r\n+        }\r\n+        res.json(results.map(user => ({\r\n+            ...user,\r\n+            picture: user.picture ? `http://localhost:4000/${user.picture}` : null\r\n+        })));\r\n+    } catch (err) {\r\n+        console.log(err);\r\n+        res.status(500).json({ error: \"เกิดข้อผิดพลาด\" });\r\n+    }\r\n+});\r\n+\r\n+// กำหนดโฟลเดอร์สำหรับเก็บรูป\r\n+const storage = multer.diskStorage({\r\n+    destination: function (req, file, cb) {\r\n+        cb(null, 'uploads/');\r\n+    },\r\n+    filename: function (req, file, cb) {\r\n+        cb(null, Date.now() + path.extname(file.originalname));\r\n+    }\r\n+});\r\n+const upload = multer({ storage: storage });\r\n+app.use('/uploads', express.static('uploads'));\r\n+\r\n+// แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n+\r\n+app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n+    const { name, email } = req.body;\r\n+  \r\n+    const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n+  \r\n+    try{\r\n+  \r\n+      const userid = req.user.id;\r\n+  \r\n+  \r\n+  \r\n+      let query = 'UPDATE users SET name=?, email=?'\r\n+  \r\n+      let params = [name , email]\r\n+  \r\n+  \r\n+  \r\n+      if(picturePath) {\r\n+  \r\n+        query += ', picture =? '\r\n+  \r\n+        params.push(picturePath)\r\n+  \r\n+      }\r\n+  \r\n+      query += 'WHERE id =? '\r\n+  \r\n+      params.push(userid)\r\n+  \r\n+  \r\n+  \r\n+      const [results] = await pool.query(query, params);\r\n+  \r\n+  \r\n+  \r\n+      if(results.affectedRows === 0) {\r\n+  \r\n+        return res.status(400).json({ error : \"ไมพบผู้ใช้\"});\r\n+  \r\n+      }\r\n+  \r\n+      res.json({message: \"แก้ไขข้อมูลเรียบร้อย\"});\r\n+  \r\n+    } catch (err) {\r\n+  \r\n+      console.log(\"Error\", err);\r\n+  \r\n+      res.status(500).json( {error : \"ผิดพลาด\"});\r\n+  \r\n+    }\r\n+  \r\n+  })\r\n+\r\n+app.listen(port, () => console.log(`Example app listening on port ${port}!`));\r\n"
                },
                {
                    "date": 1727776128907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,8 @@\n // แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n \r\n app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n     const { name, email } = req.body;\r\n-  \r\n     const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n   \r\n     try{\r\n   \r\n@@ -112,120 +111,4 @@\n   \r\n   })\r\n \r\n app.listen(port, () => console.log(`Example app listening on port ${port}!`));\r\n-const express = require('express');\r\n-const pool = require('./database');\r\n-const bcrypt = require('bcryptjs');\r\n-const jwt = require('jsonwebtoken');\r\n-const cors = require('cors');\r\n-const multer = require('multer');\r\n-require('dotenv').config();\r\n-const path = require('path');\r\n-\r\n-const app = express();\r\n-app.use(cors());\r\n-app.use(express.json());\r\n-\r\n-const port = 4000;\r\n-app.get('/', (req, res) => res.send('Hello World!'));\r\n-\r\n-// ตรวจสอบ user token\r\n-const authenticateToken = (req, res, next) => {\r\n-    const authHeader = req.headers['authorization'];\r\n-    const token = authHeader && authHeader.split(' ')[1];\r\n-    if (!token) return res.sendStatus(401);\r\n-\r\n-    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {\r\n-      if (err) return res.sendStatus(403);\r\n-      req.user = user;\r\n-      next();\r\n-    });\r\n-};\r\n-\r\n-// ดึงข้อมูลผู้ใช้งานที่เข้าสู่ระบบ\r\n-app.get('/account', authenticateToken, async (req, res) => {\r\n-    try {\r\n-        const userid = req.user.id;\r\n-        const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id = ?\", [userid]);\r\n-        if (results.length === 0) {\r\n-            return res.status(404).json({ error: \"ไม่พบผู้ใช้\" });\r\n-        }\r\n-        res.json(results.map(user => ({\r\n-            ...user,\r\n-            picture: user.picture ? `http://localhost:4000/${user.picture}` : null\r\n-        })));\r\n-    } catch (err) {\r\n-        console.log(err);\r\n-        res.status(500).json({ error: \"เกิดข้อผิดพลาด\" });\r\n-    }\r\n-});\r\n-\r\n-// กำหนดโฟลเดอร์สำหรับเก็บรูป\r\n-const storage = multer.diskStorage({\r\n-    destination: function (req, file, cb) {\r\n-        cb(null, 'uploads/');\r\n-    },\r\n-    filename: function (req, file, cb) {\r\n-        cb(null, Date.now() + path.extname(file.originalname));\r\n-    }\r\n-});\r\n-const upload = multer({ storage: storage });\r\n-app.use('/uploads', express.static('uploads'));\r\n-\r\n-// แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n-\r\n-app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n-\r\n-    const { name, email } = req.body;\r\n-  \r\n-    const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n-  \r\n-    try{\r\n-  \r\n-      const userid = req.user.id;\r\n-  \r\n-  \r\n-  \r\n-      let query = 'UPDATE users SET name=?, email=?'\r\n-  \r\n-      let params = [name , email]\r\n-  \r\n-  \r\n-  \r\n-      if(picturePath) {\r\n-  \r\n-        query += ', picture =? '\r\n-  \r\n-        params.push(picturePath)\r\n-  \r\n-      }\r\n-  \r\n-      query += 'WHERE id =? '\r\n-  \r\n-      params.push(userid)\r\n-  \r\n-  \r\n-  \r\n-      const [results] = await pool.query(query, params);\r\n-  \r\n-  \r\n-  \r\n-      if(results.affectedRows === 0) {\r\n-  \r\n-        return res.status(400).json({ error : \"ไมพบผู้ใช้\"});\r\n-  \r\n-      }\r\n-  \r\n-      res.json({message: \"แก้ไขข้อมูลเรียบร้อย\"});\r\n-  \r\n-    } catch (err) {\r\n-  \r\n-      console.log(\"Error\", err);\r\n-  \r\n-      res.status(500).json( {error : \"ผิดพลาด\"});\r\n-  \r\n-    }\r\n-  \r\n-  })\r\n-\r\n-app.listen(port, () => console.log(`Example app listening on port ${port}!`));\r\n"
                },
                {
                    "date": 1727776138719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,15 +61,10 @@\n \r\n app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n     const { name, email } = req.body;\r\n     const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n-  \r\n     try{\r\n-  \r\n       const userid = req.user.id;\r\n-  \r\n-  \r\n-  \r\n       let query = 'UPDATE users SET name=?, email=?'\r\n   \r\n       let params = [name , email]\r\n   \r\n"
                },
                {
                    "date": 1727776144140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,13 +64,10 @@\n     const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n     try{\r\n       const userid = req.user.id;\r\n       let query = 'UPDATE users SET name=?, email=?'\r\n-  \r\n       let params = [name , email]\r\n   \r\n-  \r\n-  \r\n       if(picturePath) {\r\n   \r\n         query += ', picture =? '\r\n   \r\n"
                },
                {
                    "date": 1727776274482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const jwt = require('jsonwebtoken');\r\n const cors = require('cors');\r\n const multer = require('multer');\r\n require('dotenv').config();\r\n-const path = require('path');\r\n+const path = require('path'); // แก้ไข import เป็น require\r\n \r\n const app = express();\r\n app.use(cors());\r\n app.use(express.json());\r\n@@ -16,91 +16,132 @@\n \r\n // ตรวจสอบ user token\r\n const authenticateToken = (req, res, next) => {\r\n     const authHeader = req.headers['authorization'];\r\n-    const token = authHeader && authHeader.split(' ')[1];\r\n-    if (!token) return res.sendStatus(401);\r\n+    const token = authHeader && authHeader.split(' ')[1]; // รับ token จาก header\r\n+    if (!token) return res.sendStatus(401); // ถ้าไม่มี token ส่ง status 401\r\n \r\n     jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {\r\n-      if (err) return res.sendStatus(403);\r\n-      req.user = user;\r\n-      next();\r\n+      if (err) return res.sendStatus(403); // ถ้า token ไม่ถูกต้อง ส่ง status 403\r\n+      req.user = user; // เก็บข้อมูล user ไว้ใน req\r\n+      next(); // ดำเนินการต่อไป\r\n     });\r\n-};\r\n+  };\r\n \r\n-// ดึงข้อมูลผู้ใช้งานที่เข้าสู่ระบบ\r\n-app.get('/account', authenticateToken, async (req, res) => {\r\n+// ดึงข้อมูลผู้ใช้งานที่เข้าเข้าระบบ Account\r\n+app.get('/account' , authenticateToken, async (req, res) => {\r\n     try {\r\n-        const userid = req.user.id;\r\n-        const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id = ?\", [userid]);\r\n-        if (results.length === 0) {\r\n-            return res.status(404).json({ error: \"ไม่พบผู้ใช้\" });\r\n+      const userid = req.user.id;\r\n+      const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id =?\", [userid])\r\n+      if(results.length === 0) {\r\n+        return res.status(404).json({error: \"ไม่พบผู้ใช้\"})\r\n+      }\r\n+      res.json(results)\r\n+    }catch (err) {\r\n+      console.log(err)\r\n+      res.status(500).json({ error: \"ผิดพลาด\"})\r\n+    }\r\n+  })\r\n+\r\n+app.post('/register', async (req, res) => {\r\n+    const { email, password, name } = req.body;\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+    try {\r\n+        const [result] = await pool.query('INSERT INTO users (email, password, name) VALUES (?, ?, ?)', [email, hashedPassword, name]);\r\n+        res.status(201).send('User registered');\r\n+    } catch (error) {\r\n+        console.error(error); // เพิ่มการพิมพ์ข้อผิดพลาดเพื่อช่วยในการดีบัก\r\n+        res.status(500).send('Error registering user');\r\n+    }\r\n+});\r\n+\r\n+app.post('/login', async (req, res) => {\r\n+    const { email, password } = req.body;\r\n+    try {\r\n+        const [results] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);\r\n+        const user = results[0];\r\n+        if (!user) {\r\n+            return res.status(404).json({ message: 'User not found' });\r\n         }\r\n-        res.json(results.map(user => ({\r\n-            ...user,\r\n-            picture: user.picture ? `http://localhost:4000/${user.picture}` : null\r\n-        })));\r\n-    } catch (err) {\r\n-        console.log(err);\r\n-        res.status(500).json({ error: \"เกิดข้อผิดพลาด\" });\r\n+        if (await bcrypt.compare(password, user.password)) {\r\n+            const accessToken = jwt.sign({ id: user.id, email: user.email },\r\n+                process.env.ACCESS_TOKEN_SECRET,\r\n+                { expiresIn: '20h' }\r\n+            );\r\n+            return res.json({ token: accessToken });\r\n+        } else {\r\n+            return res.status(401).json({ message: 'Password incorrect' });\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error); // เพิ่มการพิมพ์ข้อผิดพลาดเพื่อช่วยในการดีบัก\r\n+        res.status(500).send('Error logging in');\r\n     }\r\n });\r\n \r\n+app.post('/addnew', async (req, res) => {\r\n+    const { fname, lname } = req.body;\r\n+\r\n+    // ตรวจสอบข้อมูลพนักงานที่มีอยู่แล้วในฐานข้อมูล\r\n+    const [results] = await pool.query('SELECT * FROM employees WHERE fname = ?', [fname]);\r\n+    let employee = results[0];\r\n+\r\n+    // ถ้าพนักงานไม่พบในฐานข้อมูล ให้เพิ่มข้อมูลพนักงานใหม่\r\n+    if (!employee) {\r\n+        await pool.query('INSERT INTO employees (fname, lname) VALUES (?, ?)', [fname, lname]);\r\n+        // ดึงข้อมูลพนักงานที่เพิ่มใหม่ออกมา\r\n+        const [newResults] = await pool.query('SELECT * FROM employees WHERE fname = ?', [fname]);\r\n+        employee = newResults[0];\r\n+    }\r\n+\r\n+    // ตรวจสอบการเปรียบเทียบรหัสผ่าน\r\n+    if (await bcrypt.compare(lname, employee.lname)) {\r\n+        const accessToken = jwt.sign({ id: employee.id, fname: employee.fname },\r\n+            process.env.ACCESS_TOKEN_SECRET,\r\n+            { expiresIn: '20h' }\r\n+        );\r\n+        return res.json({ token: accessToken });\r\n+    } else {\r\n+        return res.status(401).json({ message: 'เพิ่มข้อมูลสำเร็จ' });\r\n+    }\r\n+});\r\n+\r\n // กำหนดโฟลเดอร์สำหรับเก็บรูป\r\n const storage = multer.diskStorage({\r\n     destination: function (req, file, cb) {\r\n-        cb(null, 'uploads/');\r\n+        cb(null, 'uploads/')\r\n     },\r\n-    filename: function (req, file, cb) {\r\n-        cb(null, Date.now() + path.extname(file.originalname));\r\n+    filename: function(req, file, cb) {\r\n+\r\n+        cb(null, Date.now() + path.extname(file.originalname))\r\n+\r\n     }\r\n-});\r\n+})\r\n const upload = multer({ storage: storage });\r\n+// เปิดให้เข้าถึงไฟล์จากโฟลเดอร์ 'uploads'\r\n app.use('/uploads', express.static('uploads'));\r\n \r\n // แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n-\r\n app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n     const { name, email } = req.body;\r\n-    const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n+    const picturePath = req.file ? uploads/${req.file.filename} : null;\r\n     try{\r\n       const userid = req.user.id;\r\n       let query = 'UPDATE users SET name=?, email=?'\r\n       let params = [name , email]\r\n-  \r\n       if(picturePath) {\r\n-  \r\n         query += ', picture =? '\r\n-  \r\n         params.push(picturePath)\r\n-  \r\n       }\r\n-  \r\n       query += 'WHERE id =? '\r\n-  \r\n       params.push(userid)\r\n-  \r\n-  \r\n-  \r\n       const [results] = await pool.query(query, params);\r\n-  \r\n-  \r\n-  \r\n       if(results.affectedRows === 0) {\r\n-  \r\n         return res.status(400).json({ error : \"ไมพบผู้ใช้\"});\r\n-  \r\n       }\r\n-  \r\n       res.json({message: \"แก้ไขข้อมูลเรียบร้อย\"});\r\n-  \r\n     } catch (err) {\r\n-  \r\n       console.log(\"Error\", err);\r\n-  \r\n       res.status(500).json( {error : \"ผิดพลาด\"});\r\n-  \r\n     }\r\n-  \r\n   })\r\n \r\n-app.listen(port, () => console.log(`Example app listening on port ${port}!`));\r\n+app.listen(port, () => console.log(Example app listening on port ${port}!));\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727776373151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const jwt = require('jsonwebtoken');\r\n const cors = require('cors');\r\n const multer = require('multer');\r\n require('dotenv').config();\r\n-const path = require('path'); // แก้ไข import เป็น require\r\n+const path = require('path');\r\n \r\n const app = express();\r\n app.use(cors());\r\n app.use(express.json());\r\n"
                },
                {
                    "date": 1727776429415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,132 +16,70 @@\n \r\n // ตรวจสอบ user token\r\n const authenticateToken = (req, res, next) => {\r\n     const authHeader = req.headers['authorization'];\r\n-    const token = authHeader && authHeader.split(' ')[1]; // รับ token จาก header\r\n-    if (!token) return res.sendStatus(401); // ถ้าไม่มี token ส่ง status 401\r\n+    const token = authHeader && authHeader.split(' ')[1];\r\n+    if (!token) return res.sendStatus(401);\r\n \r\n     jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {\r\n-      if (err) return res.sendStatus(403); // ถ้า token ไม่ถูกต้อง ส่ง status 403\r\n-      req.user = user; // เก็บข้อมูล user ไว้ใน req\r\n-      next(); // ดำเนินการต่อไป\r\n+      if (err) return res.sendStatus(403);\r\n+      req.user = user;\r\n+      next();\r\n     });\r\n-  };\r\n+};\r\n \r\n-// ดึงข้อมูลผู้ใช้งานที่เข้าเข้าระบบ Account\r\n-app.get('/account' , authenticateToken, async (req, res) => {\r\n+// ดึงข้อมูลผู้ใช้งานที่เข้าสู่ระบบ\r\n+app.get('/account', authenticateToken, async (req, res) => {\r\n     try {\r\n-      const userid = req.user.id;\r\n-      const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id =?\", [userid])\r\n-      if(results.length === 0) {\r\n-        return res.status(404).json({error: \"ไม่พบผู้ใช้\"})\r\n-      }\r\n-      res.json(results)\r\n-    }catch (err) {\r\n-      console.log(err)\r\n-      res.status(500).json({ error: \"ผิดพลาด\"})\r\n-    }\r\n-  })\r\n-\r\n-app.post('/register', async (req, res) => {\r\n-    const { email, password, name } = req.body;\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-    try {\r\n-        const [result] = await pool.query('INSERT INTO users (email, password, name) VALUES (?, ?, ?)', [email, hashedPassword, name]);\r\n-        res.status(201).send('User registered');\r\n-    } catch (error) {\r\n-        console.error(error); // เพิ่มการพิมพ์ข้อผิดพลาดเพื่อช่วยในการดีบัก\r\n-        res.status(500).send('Error registering user');\r\n-    }\r\n-});\r\n-\r\n-app.post('/login', async (req, res) => {\r\n-    const { email, password } = req.body;\r\n-    try {\r\n-        const [results] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);\r\n-        const user = results[0];\r\n-        if (!user) {\r\n-            return res.status(404).json({ message: 'User not found' });\r\n+        const userid = req.user.id;\r\n+        const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id = ?\", [userid]);\r\n+        if (results.length === 0) {\r\n+            return res.status(404).json({ error: \"ไม่พบผู้ใช้\" });\r\n         }\r\n-        if (await bcrypt.compare(password, user.password)) {\r\n-            const accessToken = jwt.sign({ id: user.id, email: user.email },\r\n-                process.env.ACCESS_TOKEN_SECRET,\r\n-                { expiresIn: '20h' }\r\n-            );\r\n-            return res.json({ token: accessToken });\r\n-        } else {\r\n-            return res.status(401).json({ message: 'Password incorrect' });\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error); // เพิ่มการพิมพ์ข้อผิดพลาดเพื่อช่วยในการดีบัก\r\n-        res.status(500).send('Error logging in');\r\n+        res.json(results.map(user => ({\r\n+            ...user,\r\n+            picture: user.picture ? `http://localhost:4000/${user.picture}` : null\r\n+        })));\r\n+    } catch (err) {\r\n+        console.log(err);\r\n+        res.status(500).json({ error: \"เกิดข้อผิดพลาด\" });\r\n     }\r\n });\r\n \r\n-app.post('/addnew', async (req, res) => {\r\n-    const { fname, lname } = req.body;\r\n-\r\n-    // ตรวจสอบข้อมูลพนักงานที่มีอยู่แล้วในฐานข้อมูล\r\n-    const [results] = await pool.query('SELECT * FROM employees WHERE fname = ?', [fname]);\r\n-    let employee = results[0];\r\n-\r\n-    // ถ้าพนักงานไม่พบในฐานข้อมูล ให้เพิ่มข้อมูลพนักงานใหม่\r\n-    if (!employee) {\r\n-        await pool.query('INSERT INTO employees (fname, lname) VALUES (?, ?)', [fname, lname]);\r\n-        // ดึงข้อมูลพนักงานที่เพิ่มใหม่ออกมา\r\n-        const [newResults] = await pool.query('SELECT * FROM employees WHERE fname = ?', [fname]);\r\n-        employee = newResults[0];\r\n-    }\r\n-\r\n-    // ตรวจสอบการเปรียบเทียบรหัสผ่าน\r\n-    if (await bcrypt.compare(lname, employee.lname)) {\r\n-        const accessToken = jwt.sign({ id: employee.id, fname: employee.fname },\r\n-            process.env.ACCESS_TOKEN_SECRET,\r\n-            { expiresIn: '20h' }\r\n-        );\r\n-        return res.json({ token: accessToken });\r\n-    } else {\r\n-        return res.status(401).json({ message: 'เพิ่มข้อมูลสำเร็จ' });\r\n-    }\r\n-});\r\n-\r\n // กำหนดโฟลเดอร์สำหรับเก็บรูป\r\n const storage = multer.diskStorage({\r\n     destination: function (req, file, cb) {\r\n-        cb(null, 'uploads/')\r\n+        cb(null, 'uploads/');\r\n     },\r\n-    filename: function(req, file, cb) {\r\n-\r\n-        cb(null, Date.now() + path.extname(file.originalname))\r\n-\r\n+    filename: function (req, file, cb) {\r\n+        cb(null, Date.now() + path.extname(file.originalname));\r\n     }\r\n-})\r\n+});\r\n const upload = multer({ storage: storage });\r\n-// เปิดให้เข้าถึงไฟล์จากโฟลเดอร์ 'uploads'\r\n app.use('/uploads', express.static('uploads'));\r\n \r\n // แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n-app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n+app.put('/update-account', authenticateToken, upload.single('picture'), async (req, res) => {\r\n\\ No newline at end of file\n     const { name, email } = req.body;\r\n-    const picturePath = req.file ? uploads/${req.file.filename} : null;\r\n-    try{\r\n-      const userid = req.user.id;\r\n-      let query = 'UPDATE users SET name=?, email=?'\r\n-      let params = [name , email]\r\n-      if(picturePath) {\r\n-        query += ', picture =? '\r\n-        params.push(picturePath)\r\n-      }\r\n-      query += 'WHERE id =? '\r\n-      params.push(userid)\r\n-      const [results] = await pool.query(query, params);\r\n-      if(results.affectedRows === 0) {\r\n-        return res.status(400).json({ error : \"ไมพบผู้ใช้\"});\r\n-      }\r\n-      res.json({message: \"แก้ไขข้อมูลเรียบร้อย\"});\r\n+    const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n+    try {\r\n+        const userid = req.user.id;\r\n+        let query = 'UPDATE users SET name = ?, email = ?';\r\n+        let params = [name, email];\r\n+        if (picturePath) {\r\n+            query += ', picture = ?';\r\n+            params.push(picturePath);\r\n+        }\r\n+        query += ' WHERE id = ?';\r\n+        params.push(userid);\r\n+        const [results] = await pool.query(query, params);\r\n+        if (results.affectedRows === 0) {\r\n+            return res.status(400).json({ error: \"ไม่พบผู้ใช้\" });\r\n+        }\r\n+        res.json({ message: \"แก้ไขข้อมูลเรียบร้อย\" });\r\n     } catch (err) {\r\n-      console.log(\"Error\", err);\r\n-      res.status(500).json( {error : \"ผิดพลาด\"});\r\n+        console.log(err);\r\n+        res.status(500).json({ error: \"เกิดข้อผิดพลาด\" });\r\n     }\r\n-  })\r\n+});\r\n \r\n-app.listen(port, () => console.log(Example app listening on port ${port}!));\n+app.listen(port, () => console.log(`Example app listening on port ${port}!`));\r\n"
                },
                {
                    "date": 1727776556964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,85 +1,165 @@\n-const express = require('express');\r\n-const pool = require('./database');\r\n-const bcrypt = require('bcryptjs');\r\n-const jwt = require('jsonwebtoken');\r\n-const cors = require('cors');\r\n-const multer = require('multer');\r\n-require('dotenv').config();\r\n-const path = require('path');\r\n+const express = require('express')\r\n+const pool = require('./database')\r\n+const bcrypt = require('bcryptjs')\r\n+const jwt = require('jsonwebtoken')\r\n+const cors = require('cors')\r\n+const multer = require('multer')\r\n+require('dotenv').config()\r\n+const path = require('path')\r\n \r\n-const app = express();\r\n-app.use(cors());\r\n-app.use(express.json());\r\n+const app = express()\r\n+app.use(cors())\r\n+app.use(express.json())\r\n \r\n-const port = 4000;\r\n-app.get('/', (req, res) => res.send('Hello World!'));\r\n+const port = 4000\r\n \r\n+app.get('/', (req, res) => res.send('Hello World!'))\r\n+\r\n // ตรวจสอบ user token\r\n+\r\n const authenticateToken = (req, res, next) => {\r\n     const authHeader = req.headers['authorization'];\r\n-    const token = authHeader && authHeader.split(' ')[1];\r\n-    if (!token) return res.sendStatus(401);\r\n-\r\n-    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {\r\n-      if (err) return res.sendStatus(403);\r\n-      req.user = user;\r\n-      next();\r\n+    const token = authHeader && authHeader.split(' ')[1]; // รับ token จาก header \r\n+    if (!token) return res.sendStatus(401); // ถ้าไม่มี token ส่ง status 401 \r\n+    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => { \r\n+      if (err) return res.sendStatus(403); // ถ้า token ไม่ถูกต้อง ส่ง status 403\r\n+      req.user = user; // เก็บข้อมูล user ไว้ใน req\r\n+      next(); // ดำเนินการต่อไป\r\n     });\r\n-};\r\n+  };\r\n+  // ดึงข้อมูลผู้ใช้งานที่เข้าเข้าระบบ Account\r\n+  app.get('/account' , authenticateToken, async (req, res) => {\r\n+    try {\r\n+      const userid = req.user.id;\r\n+      const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id =?\", [userid])\r\n+      if(results.length === 0) {\r\n+        return res.status(404).json({error: \"ไม่พบผู้ใช้\"})\r\n+      }\r\n+      res.json(results)\r\n+    }catch (err) {\r\n+      console.log(err)\r\n+      res.status(500).json({ error: \"ผิดพลาด\"})\r\n+    }\r\n+  })\r\n \r\n-// ดึงข้อมูลผู้ใช้งานที่เข้าสู่ระบบ\r\n-app.get('/account', authenticateToken, async (req, res) => {\r\n+app.get('/account' , authenticateToken, async (req, res) => {\r\n+\r\n+  try {\r\n+\r\n+    const userid = req.user.id;\r\n+\r\n+    const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id =?\", [userid])\r\n+\r\n+    if(results.length === 0) {\r\n+\r\n+      return res.status(404).json({error: \"ไม่พบผู้ใช้\"})\r\n+\r\n+    }\r\n+\r\n+    res.json(results)\r\n+\r\n+  }catch (err) {\r\n+\r\n+    console.log(err)\r\n+\r\n+    res.status(500).json({ error: \"ผิดพลาด\"})\r\n+\r\n+  }\r\n+\r\n+})\r\n+\r\n+app. post('/register', async (req, res) => {\r\n+    const { email, password, name } = req.body;\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n     try {\r\n-        const userid = req.user.id;\r\n-        const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id = ?\", [userid]);\r\n-        if (results.length === 0) {\r\n-            return res.status(404).json({ error: \"ไม่พบผู้ใช้\" });\r\n-        }\r\n-        res.json(results.map(user => ({\r\n-            ...user,\r\n-            picture: user.picture ? `http://localhost:4000/${user.picture}` : null\r\n-        })));\r\n-    } catch (err) {\r\n-        console.log(err);\r\n-        res.status(500).json({ error: \"เกิดข้อผิดพลาด\" });\r\n+        const [result] = await pool.query('INSERT INTO users (email, password, name) VALUES (?, ?, ?)', [email, hashedPassword, name]);\r\n+        res.status(201).send('Uesr registerd');\r\n+    } catch (error) {\r\n+    res.status(500).send('Error register');\r\n+    };\r\n+});\r\n+app.post('/addnew', async (req, res) => {\r\n+    const { fname, lname } = req.body;\r\n+\r\n+    // ตรวจสอบข้อมูลพนักงานที่มีอยู่แล้วในฐานข้อมูล\r\n+    const [results] = await pool.query('SELECT * FROM employees WHERE fname = ?', [fname]);\r\n+    let employee = results[0];\r\n+\r\n+    // ถ้าพนักงานไม่พบในฐานข้อมูล ให้เพิ่มข้อมูลพนักงานใหม่\r\n+    if (!employee) {\r\n+        await pool.query('INSERT INTO employees (fname, lname) VALUES (?, ?)', [fname, lname]);\r\n+        // ดึงข้อมูลพนักงานที่เพิ่มใหม่ออกมา\r\n+        const [newResults] = await pool.query('SELECT * FROM employees WHERE fname = ?', [fname]);\r\n+        employee = newResults[0];\r\n     }\r\n+\r\n+    // ตรวจสอบการเปรียบเทียบรหัสผ่าน\r\n+    if (await bcrypt.compare(lname, employee.lname)) {\r\n+        const accessToken = jwt.sign({ id: employee.id, fname: employee.fname },\r\n+            process.env.ACCESS_TOKEN_SECRET,\r\n+            { expiresIn: '20h' }\r\n+        );\r\n+        return res.json({ token: accessToken });\r\n+    } else {\r\n+        return res.status(401).json({ message: 'เพิ่มข้อมูลสำเร็จ' });\r\n+    }\r\n+    \r\n });\r\n+app.post('/login', async (req, res) => {\r\n+    const { email, password } = req.body;\r\n+    const [results] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);\r\n+    const user = results[0];\r\n+    if (!user) {\r\n+        return res.status(404).json({ message: 'User not found' });\r\n+    }\r\n+    if (await bcrypt.compare(password, user.password)) {\r\n+        const accessToken = jwt.sign({ id: user.id, email: user.email },\r\n+            process.env.ACCESS_TOKEN_SECRET,\r\n+            { expiresIn: '20h' }\r\n+        );\r\n+        return res.json({ token: accessToken });\r\n+    } else {\r\n+        return res.status(401).json({ message: 'Password incorrect' });\r\n+    }\r\n \r\n+});\r\n // กำหนดโฟลเดอร์สำหรับเก็บรูป\r\n+\r\n const storage = multer.diskStorage({\r\n     destination: function (req, file, cb) {\r\n-        cb(null, 'uploads/');\r\n+        cb(null, 'uploads/')\r\n     },\r\n-    filename: function (req, file, cb) {\r\n-        cb(null, Date.now() + path.extname(file.originalname));\r\n+    filename: function(req, file, cb) {\r\n+        cb(null, Date.now() + path.extname(file.originalname))\r\n     }\r\n-});\r\n+})\r\n const upload = multer({ storage: storage });\r\n+// เปิดให้เข้าถึงไฟล์จากโฟลเดอร์ 'uploads'\r\n app.use('/uploads', express.static('uploads'));\r\n+// แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n \r\n-// แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n-app.put('/update-account', authenticateToken, upload.single('picture'), async (req, res) => {\r\n+app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n     const { name, email } = req.body;\r\n     const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n-    try {\r\n-        const userid = req.user.id;\r\n-        let query = 'UPDATE users SET name = ?, email = ?';\r\n-        let params = [name, email];\r\n-        if (picturePath) {\r\n-            query += ', picture = ?';\r\n-            params.push(picturePath);\r\n-        }\r\n-        query += ' WHERE id = ?';\r\n-        params.push(userid);\r\n-        const [results] = await pool.query(query, params);\r\n-        if (results.affectedRows === 0) {\r\n-            return res.status(400).json({ error: \"ไม่พบผู้ใช้\" });\r\n-        }\r\n-        res.json({ message: \"แก้ไขข้อมูลเรียบร้อย\" });\r\n+    try{\r\n+      const userid = req.user.id;\r\n+      let query = 'UPDATE users SET name=?, email=?'\r\n+      let params = [name , email]\r\n+      if(picturePath) {\r\n+        query += ', picture =? '\r\n+        params.push(picturePath)\r\n+      }\r\n+      query += 'WHERE id =? '\r\n+      params.push(userid)\r\n+      const [results] = await pool.query(query, params);\r\n+      if(results.affectedRows === 0) {\r\n+        return res.status(400).json({ error : \"ไมพบผู้ใช้\"});\r\n+      }\r\n+      res.json({message: \"แก้ไขข้อมูลเรียบร้อย\"});\r\n     } catch (err) {\r\n-        console.log(err);\r\n-        res.status(500).json({ error: \"เกิดข้อผิดพลาด\" });\r\n+      console.log(\"Error\", err);\r\n+      res.status(500).json( {error : \"ผิดพลาด\"});\r\n     }\r\n-});\r\n+  })\r\n \r\n app.listen(port, () => console.log(`Example app listening on port ${port}!`));\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728370550063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,167 @@\n+const express = require('express')\r\n+const pool = require('./database')\r\n+const bcrypt = require('bcryptjs')\r\n+const jwt = require('jsonwebtoken')\r\n+const cors = require('cors')\r\n+const multer = require('multer')\r\n+require('dotenv').config()\r\n+const path = require('path')\r\n+\r\n+const app = express()\r\n+app.use(cors())\r\n+app.use(express.json())\r\n+\r\n+const port = 4000\r\n+\r\n+app.get('/', (req, res) => res.send('Hello World!'))\r\n+\r\n+// ตรวจสอบ user token\r\n+\r\n+const authenticateToken = (req, res, next) => {\r\n+    const authHeader = req.headers['authorization'];\r\n+    const token = authHeader && authHeader.split(' ')[1]; // รับ token จาก header \r\n+    if (!token) return res.sendStatus(401); // ถ้าไม่มี token ส่ง status 401 \r\n+    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => { \r\n+      if (err) return res.sendStatus(403); // ถ้า token ไม่ถูกต้อง ส่ง status 403\r\n+      req.user = user; // เก็บข้อมูล user ไว้ใน req\r\n+      next(); // ดำเนินการต่อไป\r\n+    });\r\n+  };\r\n+  // ดึงข้อมูลผู้ใช้งานที่เข้าเข้าระบบ Account\r\n+  app.get('/account' , authenticateToken, async (req, res) => {\r\n+    try {\r\n+      const userid = req.user.id;\r\n+      const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id =?\", [userid])\r\n+      if(results.length === 0) {\r\n+        return res.status(404).json({error: \"ไม่พบผู้ใช้\"})\r\n+      }\r\n+      res.json(results)\r\n+    }catch (err) {\r\n+      console.log(err)\r\n+      res.status(500).json({ error: \"ผิดพลาด\"})\r\n+    }\r\n+  })\r\n+\r\n+app.get('/account' , authenticateToken, async (req, res) => {\r\n+\r\n+  try {\r\n+\r\n+    const userid = req.user.id;\r\n+\r\n+    const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id =?\", [userid])\r\n+\r\n+    if(results.length === 0) {\r\n+\r\n+      return res.status(404).json({error: \"ไม่พบผู้ใช้\"})\r\n+\r\n+    }\r\n+\r\n+    res.json(results)\r\n+\r\n+  }catch (err) {\r\n+\r\n+    console.log(err)\r\n+\r\n+    res.status(500).json({ error: \"ผิดพลาด\"})\r\n+\r\n+  }\r\n+\r\n+})\r\n+\r\n+app. post('/register', async (req, res) => {\r\n+    const { email, password, name } = req.body;\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+    try {\r\n+        const [result] = await pool.query('INSERT INTO users (email, password, name) VALUES (?, ?, ?)', [email, hashedPassword, name]);\r\n+        res.status(201).send('Uesr registerd');\r\n+    } catch (error) {\r\n+    res.status(500).send('Error register');\r\n+    };\r\n+});\r\n+app.post('/addnew', async (req, res) => {\r\n+    const { fname, lname } = req.body;\r\n+\r\n+    // ตรวจสอบข้อมูลพนักงานที่มีอยู่แล้วในฐานข้อมูล\r\n+    const [results] = await pool.query('SELECT * FROM employees WHERE fname = ?', [fname]);\r\n+    let employee = results[0];\r\n+\r\n+    // ถ้าพนักงานไม่พบในฐานข้อมูล ให้เพิ่มข้อมูลพนักงานใหม่\r\n+    if (!employee) {\r\n+        await pool.query('INSERT INTO employees (fname, lname) VALUES (?, ?)', [fname, lname]);\r\n+        // ดึงข้อมูลพนักงานที่เพิ่มใหม่ออกมา\r\n+        const [newResults] = await pool.query('SELECT * FROM employees WHERE fname = ?', [fname]);\r\n+        employee = newResults[0];\r\n+    }\r\n+\r\n+    // ตรวจสอบการเปรียบเทียบรหัสผ่าน\r\n+    if (await bcrypt.compare(lname, employee.lname)) {\r\n+        const accessToken = jwt.sign({ id: employee.id, fname: employee.fname },\r\n+            process.env.ACCESS_TOKEN_SECRET,\r\n+            { expiresIn: '20h' }\r\n+        );\r\n+        return res.json({ token: accessToken });\r\n+    } else {\r\n+        return res.status(401).json({ message: 'เพิ่มข้อมูลสำเร็จ' });\r\n+    }\r\n+    \r\n+});\r\n+app.post('/login', async (req, res) => {\r\n+    const { email, password } = req.body;\r\n+    const [results] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);\r\n+    const user = results[0];\r\n+    if (!user) {\r\n+        return res.status(404).json({ message: 'User not found' });\r\n+    }\r\n+    if (await bcrypt.compare(password, user.password)) {\r\n+        const accessToken = jwt.sign({ id: user.id, email: user.email },\r\n+            process.env.ACCESS_TOKEN_SECRET,\r\n+            { expiresIn: '20h' }\r\n+        );\r\n+        return res.json({ token: accessToken });\r\n+    } else {\r\n+        return res.status(401).json({ message: 'Password incorrect' });\r\n+    }\r\n+\r\n+});\r\n+// กำหนดโฟลเดอร์สำหรับเก็บรูป\r\n+\r\n+const storage = multer.diskStorage({\r\n+    destination: function (req, file, cb) {\r\n+        cb(null, 'uploads/')\r\n+    },\r\n+    filename: function(req, file, cb) {\r\n+        cb(null, Date.now() + path.extname(file.originalname))\r\n+    }\r\n+})\r\n+const upload = multer({ storage: storage });\r\n+// เปิดให้เข้าถึงไฟล์จากโฟลเดอร์ 'uploads'\r\n+app.use('/uploads', express.static('uploads'));\r\n+// แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n+\r\n+app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n+    const { name, email } = req.body;\r\n+    const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n+    try{\r\n+      const userid = req.user.id;\r\n+      let query = 'UPDATE users SET name=?, email=?'\r\n+      let params = [name , email]\r\n+      if(picturePath) {\r\n+        query += ', picture =? '\r\n+        params.push(picturePath)\r\n+      }\r\n+      query += 'WHERE id =? '\r\n+      params.push(userid)\r\n+      const [results] = await pool.query(query, params);\r\n+      if(results.affectedRows === 0) {\r\n+        return res.status(400).json({ error : \"ไมพบผู้ใช้\"});\r\n+      }\r\n+      res.json({message: \"แก้ไขข้อมูลเรียบร้อย\"});\r\n+    } catch (err) {\r\n+      console.log(\"Error\", err);\r\n+      res.status(500).json( {error : \"ผิดพลาด\"});\r\n+    }\r\n+  })\r\n+\r\n+  \r\n+\r\n+app.listen(port, () => console.log(`Example app listening on port ${port}!`));\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728806975111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,8 +122,9 @@\n         return res.status(401).json({ message: 'Password incorrect' });\r\n     }\r\n \r\n });\r\n+\r\n // กำหนดโฟลเดอร์สำหรับเก็บรูป\r\n \r\n const storage = multer.diskStorage({\r\n     destination: function (req, file, cb) {\r\n@@ -161,172 +162,90 @@\n       res.status(500).json( {error : \"ผิดพลาด\"});\r\n     }\r\n   })\r\n \r\n-  \r\n+// ############# เพิ่มใน server.js ##############\r\n \r\n-app.listen(port, () => console.log(`Example app listening on port ${port}!`));\n-const express = require('express')\r\n-const pool = require('./database')\r\n-const bcrypt = require('bcryptjs')\r\n-const jwt = require('jsonwebtoken')\r\n-const cors = require('cors')\r\n-const multer = require('multer')\r\n-require('dotenv').config()\r\n-const path = require('path')\r\n+// โพสบล็อกใหม่่\r\n+app.post('/create-post', authenticateToken, async (req, res) => {\r\n+  const { title, detail, category } = req.body;\r\n+  try {\r\n+      const userid = req.user.id; // ใช้ user id จาก JWT\r\n+      const [result] = await pool.query(\r\n+          'INSERT INTO blog (userid, title, detail, category) VALUES (?, ?, ?, ?)',\r\n+          [userid, title, detail, category]\r\n+      );\r\n+      res.status(201).json({ message: \"โพสต์ถูกสร้างเรียบร้อย\", postId: result.insertId });\r\n+  } catch (err) {\r\n+      res.status(500).json({ error: \"ไม่สามารถสร้างโพสต์ได้\" });\r\n+  }\r\n+});\r\n \r\n-const app = express()\r\n-app.use(cors())\r\n-app.use(express.json())\r\n \r\n-const port = 4000\r\n-\r\n-app.get('/', (req, res) => res.send('Hello World!'))\r\n-\r\n-// ตรวจสอบ user token\r\n-\r\n-const authenticateToken = (req, res, next) => {\r\n-    const authHeader = req.headers['authorization'];\r\n-    const token = authHeader && authHeader.split(' ')[1]; // รับ token จาก header \r\n-    if (!token) return res.sendStatus(401); // ถ้าไม่มี token ส่ง status 401 \r\n-    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => { \r\n-      if (err) return res.sendStatus(403); // ถ้า token ไม่ถูกต้อง ส่ง status 403\r\n-      req.user = user; // เก็บข้อมูล user ไว้ใน req\r\n-      next(); // ดำเนินการต่อไป\r\n-    });\r\n-  };\r\n-  // ดึงข้อมูลผู้ใช้งานที่เข้าเข้าระบบ Account\r\n-  app.get('/account' , authenticateToken, async (req, res) => {\r\n-    try {\r\n+// แสดงโพสทั้งหมดตาม user\r\n+app.get ('/read-post/' , authenticateToken, async (req, res) => {\r\n+  try {\r\n       const userid = req.user.id;\r\n-      const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id =?\", [userid])\r\n+      const [results] = await pool.query('SELECT * FROM blog WHERE userid = ?', [userid])\r\n       if(results.length === 0) {\r\n-        return res.status(404).json({error: \"ไม่พบผู้ใช้\"})\r\n+          return res.status(404).json({error : \"ไม่พบบทความ\"})\r\n       }\r\n       res.json(results)\r\n-    }catch (err) {\r\n+  }catch(err) {\r\n       console.log(err)\r\n-      res.status(500).json({ error: \"ผิดพลาด\"})\r\n-    }\r\n-  })\r\n+      res.status(500).json({ error: \"ไม่สามารถดึงข้อมูลได้\"})\r\n+  }\r\n+});\r\n \r\n-app.get('/account' , authenticateToken, async (req, res) => {\r\n-\r\n+// ดึงข้อมูล blog ตาม id\r\n+app.get('/post/:blogid', async (req, res) => {\r\n+  const { blogid } = req.params; // ดึงค่า blogid จาก URL Parameters\r\n   try {\r\n-\r\n-    const userid = req.user.id;\r\n-\r\n-    const [results] = await pool.query(\"SELECT email, name, picture FROM users WHERE id =?\", [userid])\r\n-\r\n-    if(results.length === 0) {\r\n-\r\n-      return res.status(404).json({error: \"ไม่พบผู้ใช้\"})\r\n-\r\n-    }\r\n-\r\n-    res.json(results)\r\n-\r\n-  }catch (err) {\r\n-\r\n-    console.log(err)\r\n-\r\n-    res.status(500).json({ error: \"ผิดพลาด\"})\r\n-\r\n+      // คำสั่ง SQL สำหรับดึงข้อมูลบล็อกจากฐานข้อมูล\r\n+      const [result] = await pool.query('SELECT * FROM blog WHERE blogid = ?', [blogid]);\r\n+      // ตรวจสอบว่าพบบล็อกหรือไม่\r\n+      if (result.length === 0) {\r\n+          return res.status(404).json({ message: 'Blog not found' });\r\n+      }\r\n+      // ส่งข้อมูลบล็อกที่พบกลับไปยัง client\r\n+      return res.json(result[0]);\r\n+  } catch (err) {\r\n+      console.error(\"Error fetching blog data: \", err); // แสดงข้อผิดพลาดใน console\r\n+      return res.status(500).json({ message: 'Error fetching blog data', error: err });\r\n   }\r\n-\r\n-})\r\n-\r\n-app. post('/register', async (req, res) => {\r\n-    const { email, password, name } = req.body;\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-    try {\r\n-        const [result] = await pool.query('INSERT INTO users (email, password, name) VALUES (?, ?, ?)', [email, hashedPassword, name]);\r\n-        res.status(201).send('Uesr registerd');\r\n-    } catch (error) {\r\n-    res.status(500).send('Error register');\r\n-    };\r\n });\r\n-app.post('/addnew', async (req, res) => {\r\n-    const { fname, lname } = req.body;\r\n \r\n-    // ตรวจสอบข้อมูลพนักงานที่มีอยู่แล้วในฐานข้อมูล\r\n-    const [results] = await pool.query('SELECT * FROM employees WHERE fname = ?', [fname]);\r\n-    let employee = results[0];\r\n-\r\n-    // ถ้าพนักงานไม่พบในฐานข้อมูล ให้เพิ่มข้อมูลพนักงานใหม่\r\n-    if (!employee) {\r\n-        await pool.query('INSERT INTO employees (fname, lname) VALUES (?, ?)', [fname, lname]);\r\n-        // ดึงข้อมูลพนักงานที่เพิ่มใหม่ออกมา\r\n-        const [newResults] = await pool.query('SELECT * FROM employees WHERE fname = ?', [fname]);\r\n-        employee = newResults[0];\r\n+// ลบข้อมูล blog\r\n+app.delete('/post/:blogid', async (req, res) => {\r\n+  const { blogid } = req.params;\r\n+  try {\r\n+    const [result] = await pool.query('DELETE FROM blog WHERE blogid = ?', [blogid]);\r\n+    if (result.affectedRows === 0) {\r\n+      return res.status(404).json({ message: 'Blog not found' });\r\n     }\r\n-\r\n-    // ตรวจสอบการเปรียบเทียบรหัสผ่าน\r\n-    if (await bcrypt.compare(lname, employee.lname)) {\r\n-        const accessToken = jwt.sign({ id: employee.id, fname: employee.fname },\r\n-            process.env.ACCESS_TOKEN_SECRET,\r\n-            { expiresIn: '20h' }\r\n-        );\r\n-        return res.json({ token: accessToken });\r\n-    } else {\r\n-        return res.status(401).json({ message: 'เพิ่มข้อมูลสำเร็จ' });\r\n-    }\r\n-    \r\n+    return res.json({ message: 'Blog deleted successfully' });\r\n+  } catch (err) {\r\n+    console.error(\"Error executing SQL: \", err); // ตรวจสอบข้อผิดพลาด SQL\r\n+    return res.status(500).json({ message: 'Error deleting the blog', error: err });\r\n+  }\r\n });\r\n-app.post('/login', async (req, res) => {\r\n-    const { email, password } = req.body;\r\n-    const [results] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);\r\n-    const user = results[0];\r\n-    if (!user) {\r\n-        return res.status(404).json({ message: 'User not found' });\r\n-    }\r\n-    if (await bcrypt.compare(password, user.password)) {\r\n-        const accessToken = jwt.sign({ id: user.id, email: user.email },\r\n-            process.env.ACCESS_TOKEN_SECRET,\r\n-            { expiresIn: '20h' }\r\n-        );\r\n-        return res.json({ token: accessToken });\r\n-    } else {\r\n-        return res.status(401).json({ message: 'Password incorrect' });\r\n-    }\r\n \r\n+// แก้ไขข้อมูล blog\r\n+app.put('/post/:blogid', async (req, res) => {\r\n+  const { blogid } = req.params;\r\n+  const { title, detail, category } = req.body;\r\n+  try {\r\n+      const [result] = await pool.query(\r\n+          'UPDATE blog SET title = ?, detail = ?, category = ? WHERE blogid = ?',\r\n+          [title, detail, category, blogid]\r\n+      );\r\n+      if (result.affectedRows === 0) {\r\n+          return res.status(404).json({ message: 'Blog not found' });\r\n+      }\r\n+      return res.json({ message: 'Blog updated successfully' });\r\n+  } catch (err) {\r\n+      console.error(\"Error updating SQL: \", err); // ตรวจสอบข้อผิดพลาด SQL\r\n+      return res.status(500).json({ message: 'Error updating the blog', error: err });\r\n+  }\r\n });\r\n-// กำหนดโฟลเดอร์สำหรับเก็บรูป\r\n \r\n-const storage = multer.diskStorage({\r\n-    destination: function (req, file, cb) {\r\n-        cb(null, 'uploads/')\r\n-    },\r\n-    filename: function(req, file, cb) {\r\n-        cb(null, Date.now() + path.extname(file.originalname))\r\n-    }\r\n-})\r\n-const upload = multer({ storage: storage });\r\n-// เปิดให้เข้าถึงไฟล์จากโฟลเดอร์ 'uploads'\r\n-app.use('/uploads', express.static('uploads'));\r\n-// แก้ไขข้อมูลบัญชีผู้ใช้งาน\r\n-\r\n-app.put('/update-account', authenticateToken , upload.single('picture') , async (req, res) => {\r\n-    const { name, email } = req.body;\r\n-    const picturePath = req.file ? `uploads/${req.file.filename}` : null;\r\n-    try{\r\n-      const userid = req.user.id;\r\n-      let query = 'UPDATE users SET name=?, email=?'\r\n-      let params = [name , email]\r\n-      if(picturePath) {\r\n-        query += ', picture =? '\r\n-        params.push(picturePath)\r\n-      }\r\n-      query += 'WHERE id =? '\r\n-      params.push(userid)\r\n-      const [results] = await pool.query(query, params);\r\n-      if(results.affectedRows === 0) {\r\n-        return res.status(400).json({ error : \"ไมพบผู้ใช้\"});\r\n-      }\r\n-      res.json({message: \"แก้ไขข้อมูลเรียบร้อย\"});\r\n-    } catch (err) {\r\n-      console.log(\"Error\", err);\r\n-      res.status(500).json( {error : \"ผิดพลาด\"});\r\n-    }\r\n-  })\r\n-\r\n app.listen(port, () => console.log(`Example app listening on port ${port}!`));\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729091014376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,8 @@\n         return res.status(401).json({ message: 'Password incorrect' });\r\n     }\r\n \r\n });\r\n-\r\n // กำหนดโฟลเดอร์สำหรับเก็บรูป\r\n \r\n const storage = multer.diskStorage({\r\n     destination: function (req, file, cb) {\r\n"
                }
            ],
            "date": 1727766373619,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst pool = require('./database');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst cors = require('cors');\r\nrequire('dotenv').config();\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n\r\nconst port = 4000;\r\napp.get('/', (req, res) => res.send('Hello World!'));\r\n\r\napp.post('/register', async (req, res) => {\r\n    const { email, password, name } = req.body;\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    try {\r\n        const [result] = await pool.query('INSERT INTO users (email, password, name) VALUES (?, ?, ?)', [email, hashedPassword, name]);\r\n        res.status(201).send('User registered');\r\n    } catch (error) {\r\n        console.error(error); // เพิ่มการพิมพ์ข้อผิดพลาดเพื่อช่วยในการดีบัก\r\n        res.status(500).send('Error registering user');\r\n    }\r\n});\r\n\r\napp.post('/login', async (req, res) => {\r\n    const { email, password } = req.body;\r\n    try {\r\n        const [results] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);\r\n        const user = results[0];\r\n        if (!user) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n        if (await bcrypt.compare(password, user.password)) {\r\n            const accessToken = jwt.sign({ id: user.id, email: user.email },\r\n                process.env.ACCESS_TOKEN_SECRET,\r\n                { expiresIn: '20h' }\r\n            );\r\n            return res.json({ token: accessToken });\r\n        } else {\r\n            return res.status(401).json({ message: 'Password incorrect' });\r\n        }\r\n    } catch (error) {\r\n        console.error(error); // เพิ่มการพิมพ์ข้อผิดพลาดเพื่อช่วยในการดีบัก\r\n        res.status(500).send('Error logging in');\r\n    }\r\n});\r\n\r\napp.post('/addnew', async (req, res) => {\r\n    const { fname, lname } = req.body;\r\n\r\n    // ตรวจสอบข้อมูลพนักงานที่มีอยู่แล้วในฐานข้อมูล\r\n    const [results] = await pool.query('SELECT * FROM employees WHERE fname = ?', [fname]);\r\n    let employee = results[0];\r\n\r\n    // ถ้าพนักงานไม่พบในฐานข้อมูล ให้เพิ่มข้อมูลพนักงานใหม่\r\n    if (!employee) {\r\n        await pool.query('INSERT INTO employees (fname, lname) VALUES (?, ?)', [fname, lname]);\r\n        // ดึงข้อมูลพนักงานที่เพิ่มใหม่ออกมา\r\n        const [newResults] = await pool.query('SELECT * FROM employees WHERE fname = ?', [fname]);\r\n        employee = newResults[0];\r\n    }\r\n\r\n    // ตรวจสอบการเปรียบเทียบรหัสผ่าน\r\n    if (await bcrypt.compare(lname, employee.lname)) {\r\n        const accessToken = jwt.sign({ id: employee.id, fname: employee.fname },\r\n            process.env.ACCESS_TOKEN_SECRET,\r\n            { expiresIn: '20h' }\r\n        );\r\n        return res.json({ token: accessToken });\r\n    } else {\r\n        return res.status(401).json({ message: 'เพิ่มข้อมูลสำเร็จ' });\r\n    }\r\n});\r\n\r\n// กำหนดโฟลเดอร์สำหรับเก็บรูป\r\n\r\nconst storage = multer.diskStorage({\r\n\r\n    destination: function (req, file, cb) {\r\n\r\n        cb(null, 'uploads/')\r\n\r\n    },\r\n\r\n    filename: function(req, file, cb) {\r\n\r\n        cb(null, Date.now() + path.extname(file.originalname))\r\n\r\n    }\r\n\r\n})\r\n\r\nconst upload = multer({ storage: storage });\r\n\r\n\r\n\r\n// เปิดให้เข้าถึงไฟล์จากโฟลเดอร์ 'uploads'\r\n\r\napp.use('/uploads', express.static('uploads'));\r\n\r\napp.listen(port, () => console.log(`Example app listening on port ${port}!`));\r\n"
        }
    ]
}